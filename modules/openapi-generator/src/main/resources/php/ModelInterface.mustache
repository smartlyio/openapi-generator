<?php
/**
 * ModelInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  {{modelPackage}}
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

{{>partial_header}}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace {{modelPackage}};

class ValidationError {
  private $message;
  private $path;

  public function __construct(string $message, array $path = []) {
    $this->message = $message;
    $this->path = $path;
  }

  private function pathString() {
    return implode('', array_map(function($p) { return '/' . $p; }, $this->path));
  }

  public function __toString() {
    return $this->pathString() . ' ' . $this->message;
  }

  public function path(string $path) {
    return new ValidationError($this->message, array_merge([$path], $this->path));
  }
}

/**
 * Interface abstracting model access.
 *
 * @package {{modelPackage}}
 * @author  OpenAPI Generator team
 */
interface ModelInterface
{
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName();

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes();

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats();

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     *
     * @return array
     */
    public static function attributeMap();

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters();

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters();

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array
     */
    public function listInvalidProperties();

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool
     */
    public function valid();
}
